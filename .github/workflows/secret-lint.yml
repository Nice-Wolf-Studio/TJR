name: Secret Lint

# Scan for accidentally committed secrets using Gitleaks
# Runs on all pushes and pull requests to prevent secret leakage
# Related: ADR-0313-secrets-hardening, docs/security/secrets.md

on:
  push:
    branches:
      - main
      - 'phase-*'
      - 'feature/*'
      - 'hotfix/*'
  pull_request:
    branches:
      - main
      - 'phase-*'
  workflow_dispatch:

jobs:
  scan:
    name: Scan for secrets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for comprehensive scanning
          fetch-depth: 0

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # GitHub token for PR comments (optional)
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Fail the workflow if secrets are detected
          GITLEAKS_ENABLE_COMMENTS: true

      - name: Upload Gitleaks report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
          retention-days: 7

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Potential secrets detected in repository!"
          echo "::error::Review the Gitleaks report artifact for details."
          echo "::error::See docs/security/secrets.md for incident response procedures."
          exit 1

  validate-gitignore:
    name: Validate .gitignore
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check .gitignore includes required patterns
        run: |
          echo "Validating .gitignore contains required secret patterns..."

          REQUIRED_PATTERNS=(
            "^\.env$"
            "^\.env\.local$"
            "^\*\.key$"
            "^\*\.pem$"
            "credentials\.json"
            "secrets\.json"
          )

          MISSING=0
          for pattern in "${REQUIRED_PATTERNS[@]}"; do
            if ! grep -qE "$pattern" .gitignore; then
              echo "::error::Missing required .gitignore pattern: $pattern"
              MISSING=$((MISSING + 1))
            else
              echo "✓ Found: $pattern"
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "::error::$MISSING required .gitignore patterns are missing!"
            echo "::error::See docs/security/secrets.md for required patterns."
            exit 1
          fi

          echo "✓ All required .gitignore patterns present"

      - name: Verify .env is not tracked
        run: |
          echo "Checking if .env files are tracked by git..."

          TRACKED_ENV_FILES=$(git ls-files | grep -E "^\.env$|^\.env\.local$|\.env\.[^.]+\.local$" || true)

          if [ -n "$TRACKED_ENV_FILES" ]; then
            echo "::error::The following .env files are tracked by git:"
            echo "$TRACKED_ENV_FILES"
            echo "::error::These files should be in .gitignore and removed from git tracking."
            echo "::error::Use: git rm --cached <file> to untrack them."
            exit 1
          fi

          echo "✓ No .env files are tracked by git"

  check-example-files:
    name: Validate .env.example
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify .env.example exists
        run: |
          if [ ! -f .env.example ]; then
            echo "::error::.env.example file is missing!"
            echo "::error::This file is required for documentation and local setup."
            exit 1
          fi
          echo "✓ .env.example exists"

      - name: Check .env.example has no real secrets
        run: |
          echo "Scanning .env.example for patterns that look like real secrets..."

          # Patterns that indicate real secrets (not placeholders)
          SUSPICIOUS_PATTERNS=(
            # Discord tokens (real tokens have specific structure)
            "DISCORD_.*_TOKEN=[A-Za-z0-9_-]{50,}"
            # Database URLs with non-placeholder passwords
            "DATABASE_URL=postgresql://[^:]+:[^@]{16,}@"
            # API keys that don't contain obvious placeholder text
            "API_KEY=[A-Za-z0-9]{32,}(?!.*REPLACE)(?!.*EXAMPLE)(?!.*YOUR)"
          )

          ISSUES=0
          while IFS= read -r line; do
            # Skip comments and empty lines
            if [[ "$line" =~ ^[[:space:]]*# ]] || [[ -z "$line" ]]; then
              continue
            fi

            # Check for suspicious patterns
            for pattern in "${SUSPICIOUS_PATTERNS[@]}"; do
              if echo "$line" | grep -qE "$pattern"; then
                if ! echo "$line" | grep -qiE "(REPLACE|EXAMPLE|YOUR|PLACEHOLDER|DUMMY|TEST)"; then
                  echo "::warning::Potentially real secret in .env.example: $line"
                  ISSUES=$((ISSUES + 1))
                fi
              fi
            done
          done < .env.example

          if [ $ISSUES -gt 0 ]; then
            echo "::error::Found $ISSUES potentially real secrets in .env.example"
            echo "::error::All values should be obvious placeholders or examples."
            exit 1
          fi

          echo "✓ .env.example appears to contain only placeholder values"

      - name: Check for required documentation in .env.example
        run: |
          echo "Verifying .env.example includes security documentation..."

          REQUIRED_DOCS=(
            "SECURITY WARNING"
            "NEVER commit"
            "rotation"
            "docs/security/secrets.md"
          )

          MISSING=0
          for doc in "${REQUIRED_DOCS[@]}"; do
            if ! grep -qi "$doc" .env.example; then
              echo "::warning::Missing recommended documentation: $doc"
              MISSING=$((MISSING + 1))
            else
              echo "✓ Found documentation: $doc"
            fi
          done

          if [ $MISSING -gt 0 ]; then
            echo "::warning::Some recommended documentation is missing from .env.example"
            echo "::warning::See docs/security/secrets.md for best practices."
          else
            echo "✓ All recommended documentation present"
          fi

  report:
    name: Generate security report
    runs-on: ubuntu-latest
    needs: [scan, validate-gitignore, check-example-files]
    if: always()

    steps:
      - name: Report results
        run: |
          echo "=== Secret Lint Report ==="
          echo "Scan: ${{ needs.scan.result }}"
          echo "Gitignore validation: ${{ needs.validate-gitignore.result }}"
          echo "Example files: ${{ needs.check-example-files.result }}"

          if [ "${{ needs.scan.result }}" != "success" ] || \
             [ "${{ needs.validate-gitignore.result }}" != "success" ] || \
             [ "${{ needs.check-example-files.result }}" != "success" ]; then
            echo "::error::Secret lint checks failed! Review the logs above."
            echo "::error::See docs/security/secrets.md for incident response."
            exit 1
          fi

          echo "✓ All secret lint checks passed"
