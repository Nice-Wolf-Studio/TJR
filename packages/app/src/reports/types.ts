/**
 * Report types for TJR commands
 *
 * Defines the structure of reports generated by TJR commands including
 * Confluence analysis, Execution recommendations, and Setup configuration.
 */

import type {
  FVGZone,
  OrderBlock,
  ConfluenceWeights,
  ExecutionConfig,
  RiskConfig,
} from '@tjr/tjr-tools';

/**
 * Output format types for reports
 */
export type OutputFormat = 'text' | 'json' | 'table' | 'markdown';

/**
 * Validation result for configuration
 */
export interface ValidationResult {
  valid: boolean;
  errors?: string[];
  warnings?: string[];
}

/**
 * Base formatter interface for all TJR reports
 */
export interface TJRFormatter<TReport> {
  /**
   * Format report in the specified output format
   */
  format(report: TReport, format: OutputFormat): string;

  /**
   * Validate report structure
   */
  validate(report: TReport): ValidationResult;
}

/**
 * Confluence analysis report
 *
 * Generated by /tjr-confluences command to display FVG zones, Order Blocks,
 * confluence scoring, and zone overlaps.
 */
export interface ConfluenceReport {
  /** Symbol analyzed */
  symbol: string;

  /** Timeframe of analysis */
  timeframe: string;

  /** Timestamp of analysis */
  timestamp: string;

  /** Overall confluence score (0-100) */
  confluenceScore: number;

  /** Breakdown of scoring factors */
  factors: Array<{
    name: string;
    weight: number;
    value: number;
    description: string;
  }>;

  /** Detected FVG zones */
  fvgZones: FVGZone[];

  /** Detected Order Blocks */
  orderBlocks: OrderBlock[];

  /** Zone overlap analysis */
  overlaps: Array<{
    fvgIndex: number;
    orderBlockIndex: number;
    overlapHigh: number;
    overlapLow: number;
    overlapSize: number;
  }>;

  /** Analysis warnings */
  warnings?: string[];

  /** Optional metadata */
  metadata?: {
    provider?: string;
    cacheHit?: boolean;
    latencyMs?: number;
    barsAnalyzed?: number;
  };
}

/**
 * Execution recommendation report
 *
 * Generated by /tjr-execution command to display trade execution parameters
 * including 5m confirmation, 1m entry trigger, and risk management.
 */
export interface ExecutionReport {
  /** Symbol analyzed */
  symbol: string;

  /** Timestamp of analysis */
  timestamp: string;

  /** 5-minute confirmation status */
  confirmation: {
    confirmed: boolean;
    timestamp?: string;
    barIndex?: number;
    confluenceScore?: number;
    reason: string;
  };

  /** 1-minute entry trigger status */
  entryTrigger?: {
    triggered: boolean;
    entryPrice?: number;
    timestamp?: string;
    barIndex?: number;
    direction?: 'long' | 'short';
    reason: string;
  };

  /** Execution parameters (if trade is viable) */
  execution?: {
    direction: 'long' | 'short';
    entryPrice: number;
    stopLoss: number;
    takeProfit: number;
    positionSize: number;
    riskAmount: number;
    rewardAmount: number;
    riskRewardRatio: number;
    confluenceFactors: string[];
  };

  /** Risk management details */
  riskManagement?: {
    accountSize?: number;
    maxRiskPerTrade: number;
    maxRiskAmount: number;
    positionSize: number;
    dailyLossLimit?: number;
    dailyLossUsed?: number;
    canTakeNewTrade: boolean;
    partialExits?: Array<{
      percentage: number;
      price: number;
      description: string;
    }>;
  };

  /** Analysis warnings */
  warnings?: string[];

  /** Optional metadata */
  metadata?: {
    provider?: string;
    cacheHit?: boolean;
    latencyMs?: number;
    bars5mAnalyzed?: number;
    bars1mAnalyzed?: number;
  };
}

/**
 * Setup configuration report
 *
 * Generated by /tjr-setup command to display and validate current configuration.
 */
export interface SetupReport {
  /** Current confluence configuration */
  confluence: {
    weights: ConfluenceWeights;
    fvg: {
      minGapSizeATR: number;
      checkFilled: boolean;
    };
    orderBlock: {
      minVolumeRatio: number;
      minRejection: number;
      checkMitigated: boolean;
    };
  };

  /** Current execution configuration */
  execution: ExecutionConfig;

  /** Current risk configuration */
  risk?: RiskConfig;

  /** Formatting preferences */
  formatting: {
    defaultFormat: OutputFormat;
    includeMetadata: boolean;
    verbose: boolean;
  };

  /** Cache configuration */
  cache: {
    enabled: boolean;
    ttl: {
      confluence: number;
      execution: number;
    };
  };

  /** Configuration validation status */
  validation: ValidationResult;

  /** Timestamp of report */
  timestamp: string;

  /** Optional metadata */
  metadata?: {
    configPath?: string;
    lastModified?: string;
  };
}
